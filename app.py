import os
import json
from datetime import datetime, timezone
import gspread
import markdown
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from google.oauth2.service_account import Credentials
from dateutil import parser, tz
import traceback

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
app = Flask(__name__)
app.secret_key = os.urandom(24)
MOSCOW_TZ = tz.gettz('Europe/Moscow')

# --- –®–ê–ë–õ–û–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ ---
@app.template_filter('markdown')
def markdown_filter(s):
    return markdown.markdown(s or '', extensions=['fenced_code', 'tables'])

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE & GEMINI API ---
gemini_model = None
try:
    GOOGLE_CREDS_INFO = json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON"))
    GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
    if not GOOGLE_CREDS_INFO or not GOOGLE_SHEET_ID:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ GOOGLE_CREDENTIALS_JSON –∏ GOOGLE_SHEET_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    
    gemini_api_key = os.getenv("GEMINI_API_KEY")
    if gemini_api_key:
        import google.generativeai as genai
        genai.configure(api_key=gemini_api_key)
        gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')
        print("‚úÖ –ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
    else:
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
except Exception as e:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    GOOGLE_CREDS_INFO = None

# --- –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø GOOGLE SHEETS ---
def get_gspread_client():
    if not GOOGLE_CREDS_INFO: raise Exception("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(GOOGLE_CREDS_INFO, scopes=scopes)
    return gspread.authorize(creds)

def get_worksheet(worksheet_name):
    try:
        gc = get_gspread_client()
        spreadsheet = gc.open_by_key(GOOGLE_SHEET_ID)
        return spreadsheet.worksheet(worksheet_name)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É '{worksheet_name}': {e}"); return None

def get_data_from_sheet(worksheet_name, user_id=None):
    worksheet = get_worksheet(worksheet_name)
    if not worksheet: return []
    try:
        records = worksheet.get_all_records()
        if not user_id: return records
        return [r for r in records if str(r.get('user_id')) == str(user_id)]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ {worksheet_name}: {e}"); return []


# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –û–¢–ß–ï–¢–ê ---
def generate_analysis_report(thoughts, timers, sports):
    if not gemini_model: return "–ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    thoughts_text = "\n".join(f"- [{parser.isoparse(t['timestamp']).astimezone(MOSCOW_TZ).strftime('%d.%m %H:%M')}] {t['content']}" for t in thoughts) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º—ã—Å–ª—è—Ö."
    timer_text_parts = []
    for t in timers:
        duration_min = round(int(t.get('duration_seconds', 0)) / 60)
        stimulus = f"–°—Ç–∏–º—É–ª: {t.get('stimulus_level_start', 'N/A')} -> {t.get('stimulus_level_end', 'N/A')}"
        overtime = f"–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ: {t.get('overtime_work', 0)}—Å" if t.get('session_type') == '–†–∞–±–æ—Ç–∞' and t.get('overtime_work') else ""
        session_type = t.get('session_type', '–†–∞–±–æ—Ç–∞')
        task_name = t.get('task_name_raw', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') if session_type == '–†–∞–±–æ—Ç–∞' else session_type
        timer_text_parts.append(f"- [{parser.parse(t['start_time']).strftime('%d.%m %H:%M')}] {task_name}: {duration_min} –º–∏–Ω. ({stimulus}) {overtime}")
    timer_text = "\n".join(timer_text_parts) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏—è—Ö."
    sports_text_parts = []
    for s in sports:
        duration_min = round(int(s.get('duration_seconds', 0)) / 60)
        sports_text_parts.append(f"- [{parser.parse(s['start_time']).strftime('%d.%m %H:%M')}] {s.get('name', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')}: {duration_min} –º–∏–Ω.")
    sports_text = "\n".join(sports_text_parts) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö."
    prompt = f"""
# –†–û–õ–¨ –ò –ó–ê–î–ê–ß–ê
–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ **–∫—Ä–æ—Å—Å-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑** –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç—Ä—ë—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º—ã—Å–ª–∏), –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã (—Ä–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏) –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–ø–æ—Ä—Ç). –¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Å–≤—è–∑–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ, –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

# –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï

### 1. –ñ—É—Ä–Ω–∞–ª –º—ã—Å–ª–µ–π:
{thoughts_text}

### 2. –†–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Ä—ã–≤—ã:
{timer_text}

### 3. –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
{sports_text}

# –ö–õ–Æ–ß–ï–í–´–ï –î–ò–†–ï–ö–¢–ò–í–´ –ê–ù–ê–õ–ò–ó–ê

1.  **–ö–†–û–°–°-–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –°–ò–ù–¢–ï–ó (–ì–õ–ê–í–ù–û–ï):**
    *   **–°–ø–æ—Ä—Ç ‚áÑ –†–∞–±–æ—Ç–∞:** –ù–∞–π–¥–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é. –£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∏–º—É–ª –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π? –î–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–Ω–∏–∂–∞—é—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–µ—á–µ—Ä–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?
    *   **–ú—ã—Å–ª–∏ ‚áÑ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** –ö–∞–∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º—ã—Å–ª–µ–π (—Ç—Ä–µ–≤–æ–≥–∞, –º–æ—Ç–∏–≤–∞—Ü–∏—è) –≤–ª–∏—è–µ—Ç –Ω–∞ –∂–µ–ª–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º? –ö–∞–∫ —Å–µ—Å—Å–∏–∏ (—Ä–∞–±–æ—Ç–∞/—Å–ø–æ—Ä—Ç) –≤–ª–∏—è—é—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º—ã—Å–ª–∏?
    *   **–°—Ç–∏–º—É–ª –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–Ω–∞–º–∏–∫—É "–£—Ä–æ–≤–Ω—è —Å—Ç–∏–º—É–ª–∞". –ß—Ç–æ –µ–≥–æ –ø–æ–≤—ã—à–∞–µ—Ç (–∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã, —Å–ø–æ—Ä—Ç?), –∞ —á—Ç–æ –∏—Å—Ç–æ—â–∞–µ—Ç (–¥–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ –ø–∞—É–∑, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏)?

2.  **–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ò –≠–ù–ï–†–ì–ò–ò:**
    *   **–ü–∞—Ç—Ç–µ—Ä–Ω—ã "–ü–∏–∫-–°–ø–∞–¥":** –û–ø—Ä–µ–¥–µ–ª–∏ –¥–Ω–∏ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ß—Ç–æ –∏–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–æ–≤–∞–ª–æ (—Å–ø–æ—Ä—Ç, –æ—Ç–¥—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –º—ã—Å–ª–∏)?
    *   **–ë–∞–ª–∞–Ω—Å "–†–∞–±–æ—Ç–∞-–û—Ç–¥—ã—Ö-–°–ø–æ—Ä—Ç":** –û—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω –º–æ–π –≥—Ä–∞—Ñ–∏–∫. –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è (–º–Ω–æ–≥–æ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –º–∞–ª–æ –æ—Ç–¥—ã—Ö–∞ –∏ —Å–ø–æ—Ä—Ç–∞) –∏–ª–∏ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏?
    *   **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:** –°—É–¥—è –ø–æ —É—Ä–æ–≤–Ω—é —Å—Ç–∏–º—É–ª–∞ "–¥–æ" –∏ "–ø–æ—Å–ª–µ", –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã –±—ã–ª–∏ –ø–µ—Ä–µ—Ä—ã–≤—ã?

3.  **–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–• –ü–ï–¢–ï–õ–¨:**
    *   –í—ã—è–≤–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏–∫–ª—ã. *–ü—Ä–∏–º–µ—Ä: "–¢—Ä–µ–≤–æ–∂–Ω–∞—è –º—ã—Å–ª—å –æ –ø—Ä–æ–µ–∫—Ç–µ ‚Üí –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Üí –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–∞—è, –Ω–æ –Ω–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Üí –ú—ã—Å–ª—å –æ–± —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∏ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏".*

# –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–∏—Å–ø–æ–ª—å–∑—É–π Markdown)

### –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

**1. –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑)**
*   **–°–≤—è–∑—å "–°–ø–æ—Ä—Ç-–†–∞–±–æ—Ç–∞":** [–¢–≤–æ–π –≤—ã–≤–æ–¥ –æ —Ç–æ–º, –∫–∞–∫ —Å–ø–æ—Ä—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç]
*   **–°–≤—è–∑—å "–ú—ã—Å–ª–∏-–î–µ–π—Å—Ç–≤–∏—è":** [–¢–≤–æ–π –≤—ã–≤–æ–¥ –æ —Ç–æ–º, –∫–∞–∫ –º—ã—Å–ª–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç]
*   **–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π —Ü–∏–∫–ª:** [–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω–æ–π –ø–µ—Ç–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è]

**2. –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏**
*   **–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** [–û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤ –∏ —Å–ø–∞–¥–æ–≤]
*   **–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å:** [–û—Ü–µ–Ω–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞/–æ—Ç–¥—ã—Ö/—Å–ø–æ—Ä—Ç, –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—ã–≥–æ—Ä–∞–Ω–∏—è]

**3. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑**
*   **Action-Point ‚Ññ1 (–°–∏–Ω—Ç–µ–∑):** [–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Å–ø–æ—Ä—Ç/—Ä–∞–±–æ—Ç—É/–º—ã—Å–ª–∏. *–ü—Ä–∏–º–µ—Ä: "–ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∏–º—É–ª –ø–µ—Ä–µ–¥ –∑–∞–¥–∞—á–µ–π X, –ø–æ–ø—Ä–æ–±—É–π 15-–º–∏–Ω—É—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É..."*]
*   **Action-Point ‚Ññ2 (–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è):** [–°–æ–≤–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –æ—Ç–¥—ã—Ö–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö]
*   **–ù–∞ —á–µ–º —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è:** [–û–¥–Ω–∞ –∫–ª—é—á–µ–≤–∞—è –≤–µ—â—å (–ø—Ä–∏–≤—ã—á–∫–∞, –∑–∞–¥–∞—á–∞, –º—ã—Å–ª—å), –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ]
*   **–ü—Ä–æ–≥–Ω–æ–∑:**
    *   üìà **–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π:** –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —è –ø–æ—Å–ª–µ–¥—É—é —Å–æ–≤–µ—Ç–∞–º?
    *   üìâ **–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π:** –ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å?
"""
    try:
        response = gemini_model.generate_content(prompt)
        return response.text
    except Exception as e:
        traceback.print_exc()
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}"

# --- –ì–õ–ê–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ –ò –†–ï–î–ò–†–ï–ö–¢–´ ---
@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user_id = request.form.get('user_id')
        password = request.form.get('password')
        all_users = get_data_from_sheet("users")
        if not all_users:
            flash("–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", "danger")
            return render_template('login.html')
        user_found = next((user for user in all_users if str(user.get('user_id')) == user_id and str(user.get('password')) == password), None)
        if user_found:
            return redirect(url_for('app_view', user_id=user_id))
        else:
            flash("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", "danger")
    return render_template('login.html')

@app.route('/app/<user_id>')
def app_view(user_id):
    return render_template('app.html', user_id=user_id)

# --- –†–µ–¥–∏—Ä–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ä—ã—Ö URL –Ω–∞ –Ω–æ–≤—ã–π SPA-–º–∞—Ä—à—Ä—É—Ç ---
@app.route('/dashboard/<user_id>')
@app.route('/dynamics/<user_id>')
@app.route('/thoughts/<user_id>')
@app.route('/analyses/<user_id>')
@app.route('/timer/<user_id>')
def redirect_to_app(user_id):
    return redirect(url_for('app_view', user_id=user_id))


# --- API –≠–ù–î–ü–û–ò–ù–¢–´ ---
@app.route('/api/thoughts/<user_id>', methods=['POST', 'GET'])
def handle_thoughts(user_id):
    if request.method == 'POST':
        data = request.json
        thought = data.get('thought')
        if not thought: return jsonify({'status': 'error', 'message': '–ü—É—Å—Ç–∞—è –º—ã—Å–ª—å'}), 400
        worksheet = get_worksheet("thoughts")
        if not worksheet: return jsonify({'status': 'error', 'message': '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 503
        worksheet.append_row([str(user_id), datetime.now(timezone.utc).isoformat(), thought])
        return jsonify({'status': 'success'}), 201
    else: # GET
        thoughts = get_data_from_sheet("thoughts", user_id)
        thoughts.sort(key=lambda x: parser.parse(x.get('timestamp', '1970-01-01T00:00:00Z')), reverse=True)
        return jsonify(thoughts)

@app.route('/api/analyses/<user_id>', methods=['GET'])
def get_analyses(user_id):
    analyses = get_data_from_sheet("analyses", user_id)
    analyses.sort(key=lambda x: parser.parse(x.get('analysis_timestamp', '1970-01-01T00:00:00Z')), reverse=True)
    return jsonify(analyses)

@app.route('/api/run_analysis/<user_id>', methods=['POST'])
def run_analysis(user_id):
    try:
        thoughts = get_data_from_sheet("thoughts", user_id)
        timers = get_data_from_sheet("timer_logs", user_id)
        sports = get_data_from_sheet("sports activity", user_id)
        
        if not thoughts and not timers and not sports:
            return jsonify({'status': 'info', 'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.'})

        report = generate_analysis_report(thoughts, timers, sports)
        
        worksheet_analyses = get_worksheet("analyses")
        if worksheet_analyses:
            worksheet_analyses.append_row([
                str(user_id), datetime.now(timezone.utc).isoformat(),
                datetime.now(timezone.utc).isoformat(), report
            ])
            return jsonify({'status': 'success', 'message': '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'})
        else:
            return jsonify({'status': 'error', 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç'}), 500
    except Exception as e:
        traceback.print_exc()
        return jsonify({'status': 'error', 'message': str(e)}), 500


@app.route('/api/log_session', methods=['POST'])
def log_work_session():
    data = request.json
    try:
        worksheet = get_worksheet("timer_logs")
        if not worksheet:
             return jsonify({'status': 'error', 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –ª–æ–≥–æ–≤'}), 500
        start_time_local = parser.isoparse(data['start_time']).astimezone(MOSCOW_TZ)
        end_time_local = parser.isoparse(data['end_time']).astimezone(MOSCOW_TZ)
        worksheet.append_row(values=[
            str(data['user_id']), str(data.get('task_name_raw', '')),
            str(data.get('task_name_normalized', '')), str(data.get('session_type', '–†–∞–±–æ—Ç–∞')),
            str(data.get('location', '')), "", "",
            start_time_local.strftime('%Y-%m-%d %H:%M:%S'), end_time_local.strftime('%Y-%m-%d %H:%M:%S'),
            int(data['duration_seconds']), int(data.get('overtime_work', 0)),
            int(data.get('overtime_rest', 0)), data.get('stimulus_level_start', ''),
            data.get('stimulus_level_end', '')
        ])
        return jsonify({'status': 'success'})
    except Exception as e:
        traceback.print_exc()
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/log_sport_activity', methods=['POST'])
def log_sport_activity():
    data = request.json
    try:
        worksheet = get_worksheet("sports activity")
        if not worksheet: return jsonify({'status': 'error', 'message': '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500
        start_time_local = parser.isoparse(data['start_time']).astimezone(MOSCOW_TZ)
        end_time_local = parser.isoparse(data['end_time']).astimezone(MOSCOW_TZ)
        worksheet.append_row([
            str(data['user_id']), str(data['name']),
            start_time_local.strftime('%Y-%m-%d %H:%M:%S'),
            end_time_local.strftime('%Y-%m-%d %H:%M:%S'),
            int(data['duration_seconds'])
        ])
        return jsonify({'status': 'success'})
    except Exception as e:
        traceback.print_exc()
        return jsonify({'status': 'error', 'message': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 8080)), debug=True)
