import os
import sqlite3
import whisper
from pydub import AudioSegment
import google.generativeai as genai
from datetime import datetime, timedelta, timezone
import telegram
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
BOT_TOKEN = os.environ.get('BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DAYS_TO_ANALYZE = 5
DB_NAME = 'user_messages.db'
AUDIO_DIR = 'audio_files'

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(AUDIO_DIR, exist_ok=True)


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í ---

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
if not BOT_TOKEN or not GEMINI_API_KEY or not WEBHOOK_URL:
    logging.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π (BOT_TOKEN, GEMINI_API_KEY, WEBHOOK_URL) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Gemini
try:
    genai.configure(api_key=GEMINI_API_KEY)
    gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')
    logging.info("‚úÖ –ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini: {e}")
    gemini_model = None

# –í–ê–ñ–ù–´–ô –ö–û–ú–ü–†–û–ú–ò–°–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper (base)...")
try:
    whisper_model = whisper.load_model("base")
    logging.info("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Whisper: {e}")
    whisper_model = None

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---

def setup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    # check_same_thread=False –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            timestamp DATETIME NOT NULL,
            content TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()
    logging.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø HealthAI, –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.

üìù **–ß—Ç–æ —è –¥–µ–ª–∞—é?**
–Ø –ø–æ–º–æ–≥–∞—é –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –º—ã—Å–ª–∏ –∏ —ç–º–æ—Ü–∏–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Å–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –∏–¥–µ–∏ –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.

üß† **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑?**
–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /analyze, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π.

üîí **–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å**
–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º –¥–ª—è –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
"""
    await update.message.reply_text(welcome_text)


async def handle_text_or_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    user_id = update.message.from_user.id
    message_text = ""
    processing_message = await update.message.reply_text("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –º—ã—Å–ª—å...")

    if update.message.voice:
        ogg_path, wav_path = None, None
        try:
            voice_file = await update.message.voice.get_file()
            ogg_path = os.path.join(AUDIO_DIR, f"{voice_file.file_id}.ogg")
            await voice_file.download_to_drive(ogg_path)
            
            wav_path = ogg_path.rsplit('.', 1)[0] + '.wav'
            AudioSegment.from_file(ogg_path).export(wav_path, format="wav")
            
            result = whisper_model.transcribe(wav_path, language="ru")
            message_text = result.get('text', '').strip()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if ogg_path and os.path.exists(ogg_path): os.remove(ogg_path)
            if wav_path and os.path.exists(wav_path): os.remove(wav_path)

    elif update.message.text:
        message_text = update.message.text

    if message_text:
        try:
            conn = sqlite3.connect(DB_NAME, check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO messages (user_id, timestamp, content) VALUES (?, ?, ?)",
                (user_id, datetime.now(timezone.utc), message_text)
            )
            conn.commit()
            conn.close()
            await processing_message.edit_text("‚úÖ –ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /analyze")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            await processing_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—Å–ª—å.")


async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π."""
    user_id = update.message.from_user.id
    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")

    end_date = datetime.now(timezone.utc)
    start_date = end_date - timedelta(days=DAYS_TO_ANALYZE)
    date_range_str = f"–ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"

    try:
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT content FROM messages WHERE user_id = ? AND timestamp BETWEEN ? AND ?",
            (user_id, start_date, end_date)
        )
        rows = cursor.fetchall()
        conn.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º.")
        return

    if not rows:
        await update.message.reply_text(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {DAYS_TO_ANALYZE} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.")
        return

    all_texts = [row[0] for row in rows]
    full_text = "\n\n---\n\n".join(all_texts)

    prompt = f"""
# –†–û–õ–¨ –ò –ó–ê–î–ê–ß–ê

–¢—ã ‚Äî –º–æ–π –ª–∏—á–Ω—ã–π –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∫–æ—É—á. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π, –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–∏—Ö –º—ã—Å–ª–µ–π, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {DAYS_TO_ANALYZE} {'–¥–µ–Ω—å' if DAYS_TO_ANALYZE == 1 else '–¥–Ω–µ–π'}. –¶–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –º–Ω–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è, –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏, –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

# –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï

**–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥:** {date_range_str}

**–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π:**
{full_text}

# –ö–õ–Æ–ß–ï–í–´–ï –î–ò–†–ï–ö–¢–ò–í–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê

–î–µ–π—Å—Ç–≤—É–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∫–æ–Ω—Ü–µ.

1.  **–í—ã—è–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö —Å–≤—è–∑–µ–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:**
    *   –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫–∞–∫ —Ç–µ–º—ã, –ø–æ–¥–Ω—è—Ç—ã–µ –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–∏–æ–¥–∞, –≤–ª–∏—è—é—Ç –Ω–∞ –º—ã—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ.
    *   –ù–∞—Ö–æ–¥–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ –∏–¥–µ—è–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–¥–µ—è –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∏—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ–±–ª–µ–º—É?
    *   –û—Ç–º–µ—á–∞–π –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞, –º–µ—Ç–∞—Ñ–æ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏–ª–∏ —Ç–µ–º—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.

2.  **–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ä–∞–∑–±–æ—Ä –º—ã—Å–ª–µ–π:**
    *   –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª–∏ –≤—Å–µ –º–æ–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –Ω–∞ —á–µ—Ç—ã—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
        *   **–ü—Ä–æ–±–ª–µ–º—ã –∏ –¢—Ä–µ–≤–æ–≥–∏:** –í—Å–µ, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, —Å—Ç—Ä–∞—Ö, –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ, —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—é.
        *   **–ò–¥–µ–∏ –∏ –û–∑–∞—Ä–µ–Ω–∏—è:** –õ—é–±—ã–µ –Ω–æ–≤—ã–µ –º—ã—Å–ª–∏, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –ø–ª–∞–Ω—ã, –≥–∏–ø–æ—Ç–µ–∑—ã.
        *   **–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–≤–æ–¥—ã –∏ –£–±–µ–∂–¥–µ–Ω–∏—è:** –ú–æ–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–∑–∏—Ü–∏–∏, —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é.
        *   **–§–∞–∫—Ç—ã –∏ –ù–∞–±–ª—é–¥–µ–Ω–∏—è:** –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞—Ç–∞—Ü–∏–∏, –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏.

3.  **–ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è:**
    *   –û—Ü–µ–Ω–∏ –æ–±—â–∏–π –≤–µ–∫—Ç–æ—Ä –º–æ–∏—Ö –º—ã—Å–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥. –û–Ω –±—ã–ª: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º, –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º, —Å—Ç–∞–≥–Ω–∏—Ä—É—é—â–∏–º, —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–º, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–º, –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–º? –û–±–æ—Å–Ω—É–π —Å–≤–æ–π –≤—ã–≤–æ–¥.

4.  **–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—É—á–∏–Ω–≥ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ (–°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ß–ê–°–¢–¨):**
    *   **–°–æ–≤–µ—Ç—ã:** –î–ª—è –∫–∞–∂–¥–æ–π –≤—ã—è–≤–ª–µ–Ω–Ω–æ–π ¬´–ü—Ä–æ–±–ª–µ–º—ã¬ª –ø—Ä–µ–¥–ª–æ–∂–∏ 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö, –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ –µ–µ —Ä–µ—à–µ–Ω–∏—é –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—é –º–æ–µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –Ω–µ–π.
    *   **–§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è:** –£–∫–∞–∂–∏, –Ω–∞ –∫–∞–∫–∏–µ –º—ã—Å–ª–∏, –∏–¥–µ–∏ –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–Ω–µ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏.
    *   **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ):** –ó–∞–º–µ—á–∞–π –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Ö—É–¥—à–µ–Ω–∏—è –º–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–æ—Å—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏, –∞–ø–∞—Ç–∏–∏, —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∏, –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏). –§–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ –º—è–≥–∫–æ, –Ω–æ –ø—Ä—è–º–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ø –∑–∞–º–µ—á–∞—é, —á—Ç–æ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Ä–∏—Ç–æ—Ä–∏–∫–∞ —Å–∞–º–æ–æ–±–≤–∏–Ω–µ–Ω–∏—è —É—Å–∏–ª–∏–ª–∞—Å—å¬ª.
    *   **–ü—Ä–æ–≥–Ω–æ–∑:** –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, –¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ¬´–ï—Å–ª–∏ —è –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω—é –∏ –±—É–¥—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º—ã—Å–ª–∏—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 1-2 –Ω–µ–¥–µ–ª–∏?¬ª.

# –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–≤–æ–π –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

---

### **–û—Ç—á–µ—Ç –ø–æ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∑–∞ {date_range_str}**

**1. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ –ø–µ—Ä–∏–æ–¥–∞:**
*(–í 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ–ø–∏—à–∏ –∫–ª—é—á–µ–≤—É—é –º—ã—Å–ª—å –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.)*

**2. –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º—ã—Å–ª–µ–π:**
*   **–ü—Ä–æ–±–ª–µ–º—ã –∏ –¢—Ä–µ–≤–æ–≥–∏:**
    *   - [–ü—Ä–æ–±–ª–µ–º–∞ 1]
    *   - [–ü—Ä–æ–±–ª–µ–º–∞ 2]
*   **–ò–¥–µ–∏ –∏ –û–∑–∞—Ä–µ–Ω–∏—è:**
    *   - [–ò–¥–µ—è 1]
    *   - [–ò–¥–µ—è 2]
*   **–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–≤–æ–¥—ã –∏ –£–±–µ–∂–¥–µ–Ω–∏—è:**
    *   - [–î–æ–≤–æ–¥ 1]
    *   - [–£–±–µ–∂–¥–µ–Ω–∏–µ 1]
*   **–§–∞–∫—Ç—ã –∏ –ù–∞–±–ª—é–¥–µ–Ω–∏—è:**
    *   - [–§–∞–∫—Ç 1]

**3. –°–∫—Ä—ã—Ç—ã–µ —Å–≤—è–∑–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**
*   **–°–≤—è–∑—å 1:** *(–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–≤–æ–≥–∞ –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–µ–∫—Ç–∞ –• –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω–∞ —Å –≤–µ—á–µ—Ä–Ω–µ–π –∏–¥–µ–µ–π –æ —Å–º–µ–Ω–µ –∫–∞—Ä—å–µ—Ä—ã. –≠—Ç–æ –∑–∞—â–∏—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º.¬ª)*
*   **–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω:** *(–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è 5 —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Å–ª–æ–≤–æ "–¥–æ–ª–∂–µ–Ω", —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–ª—å–Ω–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ.¬ª)*

**4. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è:**
*   **–û–±—â–∏–π –≤–µ–∫—Ç–æ—Ä:** [–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π/–î–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π/–∏ —Ç.–¥.]
*   **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** *(–ü–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ —Å—á–∏—Ç–∞–µ—à—å, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.)*

**5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑:**
*   **–°–æ–≤–µ—Ç—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:**
    *   **–ü–æ –ü—Ä–æ–±–ª–µ–º–µ 1:** [–¢–≤–æ–π —Å–æ–≤–µ—Ç]
    *   **–ü–æ –ü—Ä–æ–±–ª–µ–º–µ 2:** [–¢–≤–æ–π —Å–æ–≤–µ—Ç]
*   **–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:**
    *   [–¢–≤–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]
*   **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è:**
    *   [–¢–≤–æ–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –æ–± —É—Ö—É–¥—à–µ–Ω–∏–∏/—É–ª—É—á—à–µ–Ω–∏–∏ –º–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ë—É–¥—å –ø—Ä—è–º—ã–º, –Ω–æ –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–º.]
*   **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 1-2 –Ω–µ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å):**
    *   [–¢–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π —Ç–µ–∫—É—â–µ–≥–æ –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞.]

**–í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** –Ø —è–≤–ª—è—é—Å—å —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏ –Ω–µ –º–æ–≥—É –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏–ª–∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞. –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ï—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ—Ä—å–µ–∑–Ω–æ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.

---
"""
    try:
        response = gemini_model.generate_content(prompt)
        summary = response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    final_message = f"**üóìÔ∏è –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n*(–ü–µ—Ä–∏–æ–¥: {date_range_str})*\n\n{summary}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º
    try:
        if len(final_message) > 4096:
            for i in range(0, len(final_message), 4096):
                await update.message.reply_text(final_message[i:i+4096], parse_mode='Markdown')
        else:
            await update.message.reply_text(final_message, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–Ω–æ–≤–∞.")


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
def main():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not all([BOT_TOKEN, GEMINI_API_KEY, WEBHOOK_URL, gemini_model, whisper_model]):
        logging.critical("–ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return

    setup_database()
    
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(MessageHandler(filters.TEXT | filters.VOICE, handle_text_or_voice))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    # –ü–æ—Ä—Ç 8000 —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –¥–ª—è –º–Ω–æ–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    application.run_webhook(
        listen="0.0.0.0",
        port=8000,
        url_path=BOT_TOKEN,
        webhook_url=f"https://{WEBHOOK_URL}/{BOT_TOKEN}"
    )

if __name__ == '__main__':
    main()